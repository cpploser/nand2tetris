// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=true, sel=address, a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h);
    And(a=a, b=load, out=loada);
    And(a=b, b=load, out=loadb);
    And(a=c, b=load, out=loadc);
    And(a=d, b=load, out=loadd);
    And(a=e, b=load, out=loade);
    And(a=f, b=load, out=loadf);
    And(a=g, b=load, out=loadg);
    And(a=h, b=load, out=loadh);
    Register(in=in, load=loada, out=oa);
    Register(in=in, load=loadb, out=ob);
    Register(in=in, load=loadc, out=oc);
    Register(in=in, load=loadd, out=od);
    Register(in=in, load=loade, out=oe);
    Register(in=in, load=loadf, out=of);
    Register(in=in, load=loadg, out=og);
    Register(in=in, load=loadh, out=oh);
    Mux8Way16(a=oa, b=ob, c=oc, d=od, e=oe, f=of, g=og, h=oh, sel=address, out=out);
}